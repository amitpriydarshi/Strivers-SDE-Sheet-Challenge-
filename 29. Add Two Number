/**
 * Definition of linked list:
 *
 * class Node {
 * public:
 *      int data;
 *      Node *next;
 *      Node() {
 *          this->data = 0;
 *          this->next = NULL;
 *      }
 *      Node(int data) {
 *          this->data = data;
 *          this->next = NULL;
 *      }
 *      Node (int data, Node *next) {
 *          this->data = data;
 *          this->next = next;
 *      }
 * };
 *
 *************************************************************************/
// step- 1 reverse the linked list
Node* reverse(Node* head){
    
    Node* curr=head;
    Node* prev=NULL;
    Node* next=NULL;
    while(curr != NULL){
        next=curr->next;
        curr->next=prev;
        prev=curr;
        curr=next;
    }
    return prev;
}
void insertattail(Node* head,Node* tail,int value){
    Node* temp=new Node(value);
    if(head==NULL){
        head=temp;
        tail=temp;
        return;
    }else{
        tail->next=temp;
        tail=temp;
    }
}
Node* summation(Node* num1,Node* num2){
    int carry=0;
    Node* anshead=NULL;
    Node* anstail=NULL;
    while(num1 != NULL || num2 != NULL || carry !=0){
        int val1=0;
        if(num1 != NULL) val1=num1->data;
        int val2=0;
        if(num2 != NULL) val2=num2->data;
        int sum=carry+val1+val2;
        int digit=sum%10;
        insertattail(anshead, anstail, digit);
        carry=sum/10;
        if(num1 != NULL) num1=num1->next;
        if(num2 != NULL) num2=num2->next;
    }
    
    return anshead;
}
Node *addTwoNumbers(Node *num1, Node *num2)
{
    // num1=reverse(num1);
    // num2=reverse(num2);

    // // step-2 is add the rever list
    // Node* output=summation(num1,num2);
    // output=reverse(output);
    // return output;
    Node* node1=num1;
    Node* node2=num2;
    Node* finalhead=NULL; Node* finaltail=NULL;
    Node* node=NULL;
    int sum=0; int carry=0;
    while(node1 != NULL or node2 != NULL){
        sum=carry;
        if(node1 != NULL){
            sum+=node1->data;
            node1=node1->next;
        }
        if(node2 != NULL){
            sum+=node2->data;
            node2=node2->next;
        }
        // create a new node with the sum
        int digit=sum%10;
        node=new Node(digit);
        if(finalhead==NULL){
            finalhead=node;
        }else{
            finaltail->next=node;
        }
        finaltail=node;
        carry=sum/10;
    }
    if(carry>0){
        finaltail->next=new Node(carry);
    }
    return finalhead;
}

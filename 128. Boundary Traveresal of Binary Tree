#include <bits/stdc++.h> 
/************************************************************

    Following is the Binary Tree node structure:
    
    template <typename T>
    class TreeNode {
        public :
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~TreeNode() {
            if(left)
                delete left;
            if(right)
                delete right;
        }
    };

************************************************************/
void leftv(TreeNode<int>* root,vector<int> &output){
    if(root==NULL) return;
    if(root->left==NULL and root->right==NULL) return;
    output.push_back(root->data);
    if(root->left) leftv(root->left,output);
    else leftv(root->right,output);
}
void leaf(TreeNode<int>* root,vector<int>& output){
    if(root==NULL) return;
    if(root->left==NULL and root->right==NULL){
        output.push_back(root->data);
        return;
    }
    leaf(root->left,output);
    leaf(root->right,output);
}
void right(TreeNode<int>* root,vector<int>& output){
    if(root==NULL) return;
    if(root->left==NULL and root->right==NULL){
        return;
    }
    if(root->right) right(root->right,output);
    else right(root->left,output);
    // push the element into the vector in the reverse order
    output.push_back(root->data);
}
vector<int> traverseBoundary(TreeNode<int>* root){
    // Write your code here.
    // here first print teh left part of the tree except the last nodel
    vector<int> output;
    if(root==NULL) return output;
    output.push_back(root->data);
    leftv(root->left,output);
    leaf(root->left,output);
    leaf(root->right,output);
    right(root->right,output);
    return output;
}

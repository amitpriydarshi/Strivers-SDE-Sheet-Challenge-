double median(vector<int>& a, vector<int>& b) {
	// Write your code here.


	 if (a.size() > b.size())
    {
        swap(a, b);
    }

    int n = a.size(), m = b.size();
    int low = 0, high = n;

    while (low <= high) {
        int mid = (low + high) / 2;

        int part = (n + m + 1) / 2 - mid;

        if (part > m)
        {
            low = mid + 1;
            continue;
        }

        int leftMax = 0, rightMin = 1e9 + 1;
        if (mid > 0)
        {
            leftMax = max(leftMax, a[mid - 1]);
        }

        if (part > 0)
        {
            leftMax = max(leftMax, b[part - 1]);
        }

        if (mid < n)
        {
            rightMin = min(rightMin, a[mid]);
        }

        if (part < m)
        {
            rightMin = min(rightMin, b[part]);
        }

        if (leftMax <= rightMin)
        {
            if ((n + m) & 1)
            {
                return leftMax;
            }
            return (leftMax + rightMin) / 2.0;
        }

        if (a[mid] < leftMax)
        {
            low = mid + 1;
        }
        else
        {
            high = mid - 1;
        }
    }

    return -1;
	// if(a.size()<b.size()) return median(b, a);
	// int n1=a.size(); int n2=b.size();
	// int low=0; int high=n1;
	// while(low<=high){
	// 	int c1=(low+high)>>1;
	// 	int c2=(n1+n2+1)/2-c1;
	// 	int l1=c1==0?INT_MIN:a[c1-1];
	// 	int l2=c2==0?INT_MIN:b[c2-1];
	// 	int r1=c1==n1?INT_MAX:a[c1];
	// 	int r2=c2==n2?INT_MAX:b[c2];
	// 	if(l1<=r2 and l2<=r2){
	// 		if((n1+n2)%2==0){
	// 			return (max(l1,l2)+min(r1,r2))/2.0;
	// 		}
	// 		else return max(l1,l2);
	// 	}
	// 	else if(l1>l2) high=c1-1;
	// 	else low=c1+1;
	// }
	// return 0.0;
}

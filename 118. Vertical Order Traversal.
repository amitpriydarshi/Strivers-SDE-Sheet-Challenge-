#include <bits/stdc++.h> 
/************************************************************

Following is the Binary Tree node class
    
template <typename T = int>
class TreeNode
{
public:
    T data;
    TreeNode<T> *left;
    TreeNode<T> *right;

    TreeNode(T val)
    {
        this->data = val;
        left = NULL;
        right = NULL;
    }

    ~TreeNode()
    {
        if (left != NULL)
        {
            delete left;
        }
        if (right != NULL)
        {
            delete right;
        }
    }
};

************************************************************/

vector<int> verticalOrderTraversal(TreeNode<int> *root)
{
    map<int,map<int,vector<int>>> mp;
    queue<pair<TreeNode<int>*,pair<int,int>> > q;
    vector<int> output;
    if(root==NULL) return output;
    q.push(make_pair(root,make_pair(0,0)));
    while(!q.empty()){
        pair<TreeNode<int>*,pair<int,int>> p=q.front();
        q.pop();
        TreeNode<int>* frontnode=p.first;
        int hd=p.second.first;
        int level=p.second.second;
        mp[hd][level].push_back(frontnode->data);
        // call for  the left and the right part
        if(frontnode->left){
            q.push(make_pair(frontnode->left,make_pair(hd-1,level+1)));
        }
        if(frontnode->right){
            q.push(make_pair(frontnode->right,make_pair(hd+1,level+1)));
        }
    }
    // push all the element into our output vector
    for(auto i:mp){
        for(auto j:i.second){
            for(auto k:j.second){
                output.push_back(k);
            }
        }
    }
    return output;
}




